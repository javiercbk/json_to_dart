import 'dart:html';
import 'dart:js' as JS;
import 'dart:convert' as Convert;
import '../lib/json_to_dart.dart';

void main() {
  final ButtonElement convertButton =
      document.querySelector('button[type="submit"]');
  final TextAreaElement textArea = document.querySelector('textarea');
  final InputElement input = document.querySelector('input#name');
  final highlightedDartCode = document.querySelector('pre code.dart');
  final CheckboxInputElement usePrivateFieldsCheckbox =
      document.querySelector('#private-fields');
  final ButtonElement copyClipboardButton =
      document.querySelector('#copy-clipboard');
  final TextAreaElement hiddenElement = document.querySelector('#hidden-dart');
  final Element boldElement = document.querySelector('#invalid-dart');
  copyClipboardButton.onClick.listen((MouseEvent event) {
    event.preventDefault();
    event.stopPropagation();
    if (!copyClipboardButton.disabled) {
      hiddenElement.select();
      document.execCommand("Copy");
    }
  });
  convertButton.onClick.listen((MouseEvent event) {
    event.preventDefault();
    event.stopPropagation();
    var syntaxError = false;
    var invalidDart = false;
    final json = textArea.value;
    try {
      Convert.json.decode(json);
    } catch (e) {
      syntaxError = true;
      window.alert('The json provider has syntax errors');
    }
    if (!syntaxError) {
      final modelGenerator = new ModelGenerator(
          input.value ?? 'Autogenerated', usePrivateFieldsCheckbox.checked);
      String dartCode;
      try {
        dartCode = modelGenerator.generateDartClasses(json);
        boldElement.style.display = 'none';
      } catch (e) {
        invalidDart = true;
      }
      if (invalidDart) {
        try {
          dartCode = modelGenerator.generateUnsafeDart(json);
        } catch (e) {
          window.alert(
              'Cannot generate dart code. Please check the project caveats.');
          hiddenElement.value = '';
          highlightedDartCode.text = '';
          copyClipboardButton.attributes
              .putIfAbsent('disabled', () => 'disabled');
          print(e);
          return;
        }
        boldElement.style.display = 'block';
      }
      hiddenElement.value = dartCode;
      highlightedDartCode.text = dartCode;
      copyClipboardButton.attributes.remove('disabled');
      JS.context['hljs'].callMethod('highlightBlock', [highlightedDartCode]);
    } else {
      hiddenElement.value = '';
      highlightedDartCode.text = '';
      copyClipboardButton.attributes.putIfAbsent('disabled', () => 'disabled');
    }
  });
}
